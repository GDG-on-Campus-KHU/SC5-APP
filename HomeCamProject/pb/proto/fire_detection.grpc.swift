//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/fire_detection.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `FDFireDetectionServiceClient`, then call methods of this protocol to make API calls.
public protocol FDFireDetectionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? { get }

  func streamVideo(
    callOptions: CallOptions?,
    handler: @escaping (FDVideoResponse) -> Void
  ) -> BidirectionalStreamingCall<FDVideoChunk, FDVideoResponse>
}

extension FDFireDetectionServiceClientProtocol {
  public var serviceName: String {
    return "firedetection.FireDetectionService"
  }

  /// Bidirectional streaming call to StreamVideo
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamVideo(
    callOptions: CallOptions? = nil,
    handler: @escaping (FDVideoResponse) -> Void
  ) -> BidirectionalStreamingCall<FDVideoChunk, FDVideoResponse> {
    return self.makeBidirectionalStreamingCall(
      path: FDFireDetectionServiceClientMetadata.Methods.streamVideo.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamVideoInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension FDFireDetectionServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "FDFireDetectionServiceNIOClient")
public final class FDFireDetectionServiceClient: FDFireDetectionServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the firedetection.FireDetectionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct FDFireDetectionServiceNIOClient: FDFireDetectionServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the firedetection.FireDetectionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FDFireDetectionServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? { get }

  func makeStreamVideoCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<FDVideoChunk, FDVideoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FDFireDetectionServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FDFireDetectionServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStreamVideoCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<FDVideoChunk, FDVideoResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: FDFireDetectionServiceClientMetadata.Methods.streamVideo.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamVideoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FDFireDetectionServiceAsyncClientProtocol {
  public func streamVideo<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FDVideoResponse> where RequestStream: Sequence, RequestStream.Element == FDVideoChunk {
    return self.performAsyncBidirectionalStreamingCall(
      path: FDFireDetectionServiceClientMetadata.Methods.streamVideo.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamVideoInterceptors() ?? []
    )
  }

  public func streamVideo<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FDVideoResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == FDVideoChunk {
    return self.performAsyncBidirectionalStreamingCall(
      path: FDFireDetectionServiceClientMetadata.Methods.streamVideo.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamVideoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct FDFireDetectionServiceAsyncClient: FDFireDetectionServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FDFireDetectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol FDFireDetectionServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'streamVideo'.
  func makeStreamVideoInterceptors() -> [ClientInterceptor<FDVideoChunk, FDVideoResponse>]
}

public enum FDFireDetectionServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FireDetectionService",
    fullName: "firedetection.FireDetectionService",
    methods: [
      FDFireDetectionServiceClientMetadata.Methods.streamVideo,
    ]
  )

  public enum Methods {
    public static let streamVideo = GRPCMethodDescriptor(
      name: "StreamVideo",
      path: "/firedetection.FireDetectionService/StreamVideo",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol FDFireDetectionServiceProvider: CallHandlerProvider {
  var interceptors: FDFireDetectionServiceServerInterceptorFactoryProtocol? { get }

  func streamVideo(context: StreamingResponseCallContext<FDVideoResponse>) -> EventLoopFuture<(StreamEvent<FDVideoChunk>) -> Void>
}

extension FDFireDetectionServiceProvider {
  public var serviceName: Substring {
    return FDFireDetectionServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StreamVideo":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FDVideoChunk>(),
        responseSerializer: ProtobufSerializer<FDVideoResponse>(),
        interceptors: self.interceptors?.makeStreamVideoInterceptors() ?? [],
        observerFactory: self.streamVideo(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FDFireDetectionServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FDFireDetectionServiceServerInterceptorFactoryProtocol? { get }

  func streamVideo(
    requestStream: GRPCAsyncRequestStream<FDVideoChunk>,
    responseStream: GRPCAsyncResponseStreamWriter<FDVideoResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FDFireDetectionServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FDFireDetectionServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return FDFireDetectionServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: FDFireDetectionServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StreamVideo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FDVideoChunk>(),
        responseSerializer: ProtobufSerializer<FDVideoResponse>(),
        interceptors: self.interceptors?.makeStreamVideoInterceptors() ?? [],
        wrapping: { try await self.streamVideo(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol FDFireDetectionServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'streamVideo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamVideoInterceptors() -> [ServerInterceptor<FDVideoChunk, FDVideoResponse>]
}

public enum FDFireDetectionServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FireDetectionService",
    fullName: "firedetection.FireDetectionService",
    methods: [
      FDFireDetectionServiceServerMetadata.Methods.streamVideo,
    ]
  )

  public enum Methods {
    public static let streamVideo = GRPCMethodDescriptor(
      name: "StreamVideo",
      path: "/firedetection.FireDetectionService/StreamVideo",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
